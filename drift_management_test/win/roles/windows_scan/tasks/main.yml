---
- name: Retrieve Hardening Requirements
  include_vars:
    file: defaults/windows_server_hardening_requirements.yml
    name: hardening_requirements

- name: Create csv file for each host
  set_fact:
    host_csv_file: "/tmp/{{ inventory_hostname }}.csv"

- name: Remove host CSV file if it exists
  file:
    path: "{{ host_csv_file }}"
    state: absent
  delegate_to: localhost

- name: Create host CSV file
  file:
    path: "{{ host_csv_file }}"
    state: touch
  delegate_to: localhost

- name: Create heading for host CSV file
  shell: "echo Hostname,IPAddress,Date,Baseline,Results > {{ host_csv_file }}"
  delegate_to: localhost

- name: Get Security Settings
  win_command: 'SecEdit.exe /export /cfg C:\current_hardening_results.ini'

- name: "Fetch security settings ini file for {{ inventory_hostname }}"
  fetch:
    src: 'C:\current_hardening_results.ini'
    dest: "/tmp/{{ inventory_hostname }}_security_settings_unconverted.ini"
    flat: yes

- name: "Convert file to us-ascii Format"
  command: "iconv -f utf-16le -t ascii//TRANSLIT /tmp/{{ inventory_hostname }}_security_settings_unconverted.ini -o /tmp/{{ inventory_hostname }}_security_settings.ini"
  delegate_to: localhost

#- name: Perform Server Scanning
#  include_tasks: scanning.yml


##### B. Password
- name: Retrieve current 'System Access' settings
  set_fact:
    password_history_size: "{{ lookup('ini', 'PasswordHistorySize section=System Access file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    maximum_password_age: "{{ lookup('ini', 'MaximumPasswordAge section=System Access file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    minimum_password_age: "{{ lookup('ini', 'MinimumPasswordAge section=System Access file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    minimum_password_length: "{{ lookup('ini', 'MinimumPasswordLength section=System Access file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    password_complexity: "{{ lookup('ini', 'PasswordComplexity section=System Access file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    clear_text_password: "{{ lookup('ini', 'ClearTextPassword section=System Access file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"

- name: Retrieve current setting of the 'PasswordExpiryWarning' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.password_section.password_expiry_warning.path }}"
    name: "{{ hardening_requirements.windows_hardening.password_section.password_expiry_warning.name }}"
  register: password_expiry_warning

- name: Check compliance for 'Password' section
  set_fact:
    password_expiry_warning_results: "{{ 'yes' if hardening_requirements.windows_hardening.password_section.password_expiry_warning.value | int == password_expiry_warning.value | int else 'No' }}"
    password_history_size_results: "{{ 'yes' if hardening_requirements.windows_hardening.password_section.password_history_size.value | int == password_history_size | int else 'No' }}"
    maximum_password_age_results: "{{ 'yes' if hardening_requirements.windows_hardening.password_section.maximum_password_age.value | int == maximum_password_age | int else 'No' }}"
    minimum_password_age_results: "{{ 'yes' if hardening_requirements.windows_hardening.password_section.minimum_password_age.value | int == minimum_password_age | int else 'No' }}"
    minimum_password_length_results: "{{ 'yes' if hardening_requirements.windows_hardening.password_section.minimum_password_length.value | int == minimum_password_length | int else 'No' }}"
    password_complexity_results: "{{ 'yes' if hardening_requirements.windows_hardening.password_section.password_complexity.value | int == password_complexity | int else 'No' }}"
    clear_text_password_results: "{{ 'yes' if hardening_requirements.windows_hardening.password_section.clear_text_password.value | int == clear_text_password | int else 'No' }}"
    guest_user_results: "{{ 'yes' if hardening_requirements.windows_hardening.password_section.clear_text_password.value | int == clear_text_password | int else 'No' }}"

- name: Inset entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['A-1 Rename built-in Administrator', "{{ hardening_requirements.windows_hardening.password_section.password_expiry_warning.value }}", "{{ password_expiry_warning.value }}", 'Not Applicable']
    - ['A-2 Seal and store built-in local administrator account rights in Item A.1 into PAPM system', "{{ hardening_requirements.windows_hardening.password_section.password_expiry_warning.value }}", "{{ password_expiry_warning.value }}", 'Not Applicable']
    - ['A-3 Create a dummy Administrator account with Normal User rights', "{{ hardening_requirements.windows_hardening.password_section.password_expiry_warning.value }}", "{{ password_expiry_warning.value }}", 'Not Applicable']
    - ['A-4 Disable Guest account', "{{ hardening_requirements.windows_hardening.password_section.password_expiry_warning.value }}", "{{ password_expiry_warning.value }}", "{{ password_expiry_warning_results }}"]
    - ['A-5 Disable or remove all unnecessary accounts from the system', "{{ hardening_requirements.windows_hardening.password_section.password_expiry_warning.value }}", "{{ password_expiry_warning.value }}", 'Not Applicable']
    - ['B-1 Prompt user to change password in 14 days', "{{ hardening_requirements.windows_hardening.password_section.password_expiry_warning.value }}", "{{ password_expiry_warning.value }}", "{{ password_expiry_warning_results }}"]
    - ['B-2 Set enforce password history to 5', "{{ hardening_requirements.windows_hardening.password_section.password_history_size.value }}", "{{ password_history_size }}", "{{ password_history_size_results }}"]
    - ['B-3 Set max password age to 90 days', "{{ hardening_requirements.windows_hardening.password_section.maximum_password_age.value }}", "{{ maximum_password_age }}", "{{ maximum_password_age_results }}"]
    - ['B-4 Set min password age to 1 day', "{{ hardening_requirements.windows_hardening.password_section.minimum_password_age.value }}", "{{ minimum_password_age }}", "{{ minimum_password_age_results }}"]
    - ['B-5 Set min password length to 8 chars', "{{ hardening_requirements.windows_hardening.password_section.minimum_password_length.value}}", "{{ minimum_password_length }}", "{{ minimum_password_length_results }}"]
    - ['B-6 Set meet complexity requirement to Enabled', "{{ hardening_requirements.windows_hardening.password_section.password_complexity.value }}", "{{ password_complexity }}", "{{ password_complexity_results }}"]
    - ['B-7 Set password using reversible encryption: Disabled', "{{ hardening_requirements.windows_hardening.password_section.clear_text_password.value }}", "{{ clear_text_password }}", "{{ clear_text_password_results }}"]
  delegate_to: localhost
  
##### C. Account Lockout Section

- name: Retrieve current 'System Access' settings
  set_fact:
    lockout_bad_count: "{{ lookup('ini', 'LockoutBadCount section=System Access file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    lockout_duration: "{{ lookup('ini', 'LockoutDuration section=System Access file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    reset_lockout_count: "{{ lookup('ini', 'ResetLockoutCount section=System Access file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"

- name: Check compliance for 'Account Lockout' section
  set_fact:
    lockout_bad_count_results: "{{ 'yes' if hardening_requirements.windows_hardening.account_lockout_section.lockout_bad_count.value | int == lockout_bad_count | int else 'No' }}"
    lockout_duration_results: "{{ 'yes' if hardening_requirements.windows_hardening.account_lockout_section.lockout_duration.value | int == lockout_duration | int else 'No' }}"
    reset_lockout_count_results: "{{ 'yes' if hardening_requirements.windows_hardening.account_lockout_section.reset_lockout_count.value | int == reset_lockout_count | int else 'No' }}"

- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['C-1 Set lockout duration to 30 minutes', "{{ hardening_requirements.windows_hardening.account_lockout_section.lockout_bad_count.value }}", "{{ lockout_bad_count }}", "{{ lockout_bad_count_results }}"]
    - ['C-2 Set lockout threshold to 5 invalid attempts', "{{ hardening_requirements.windows_hardening.account_lockout_section.lockout_duration.value }}", "{{ lockout_duration }}", "{{ lockout_duration_results }}"]
    - ['C-3 Set reset lockout counter to 30 minutes', "{{ hardening_requirements.windows_hardening.account_lockout_section.reset_lockout_count.value }}", "{{ reset_lockout_count }}", "{{ reset_lockout_count_results }}"]
  delegate_to: localhost
  
##### D. Logging Section

- name: Retrieve current setting of the 'Application Max Size' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.logging_section.application_max_size.path }}"
    name: "{{ hardening_requirements.windows_hardening.logging_section.application_max_size.name }}"
  register: application_max_size
  
- name: Retrieve current setting of the 'Security Max Size' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.logging_section.security_max_size.path }}"
    name: "{{ hardening_requirements.windows_hardening.logging_section.security_max_size.name }}"
  register: security_max_size
  
- name: Retrieve current setting of the 'System Max Size' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.logging_section.system_max_size.path }}"
    name: "{{ hardening_requirements.windows_hardening.logging_section.system_max_size.name }}"
  register: system_max_size
  
- name: Retrieve current setting of the 'Application Retention Log' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.logging_section.application_retention_log.path }}"
    name: "{{ hardening_requirements.windows_hardening.logging_section.application_retention_log.name }}"
  register: application_retention_log
  
- name: Retrieve current setting of the 'Security Retention Log' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.logging_section.security_retention_log.path }}"
    name: "{{ hardening_requirements.windows_hardening.logging_section.security_retention_log.name }}"
  register: security_retention_log
  
- name: Retrieve current setting of the 'System Retention Log' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.logging_section.system_retention_log.path }}"
    name: "{{ hardening_requirements.windows_hardening.logging_section.system_retention_log.name }}"
  register: system_retention_log

- name: Check compliance for 'Logging' section
  set_fact:
    application_max_size_results: "{{ 'yes' if hardening_requirements.windows_hardening.logging_section.application_max_size.value | int == application_max_size.value | int else 'No' }}"
    security_max_size_results: "{{ 'yes' if hardening_requirements.windows_hardening.logging_section.security_max_size.value | int == security_max_size.value | int else 'No' }}"
    system_max_size_results: "{{ 'yes' if hardening_requirements.windows_hardening.logging_section.system_max_size.value | int == system_max_size.value | int else 'No' }}"
    application_retention_log_results: "{{ 'yes' if hardening_requirements.windows_hardening.logging_section.application_retention_log.value | int == application_retention_log.value | int else 'No' }}"
    security_retention_log_results: "{{ 'yes' if hardening_requirements.windows_hardening.logging_section.security_retention_log.value | int == security_retention_log.value | int else 'No' }}"
    system_retention_log_results: "{{ 'yes' if hardening_requirements.windows_hardening.logging_section.system_retention_log.value | int == system_retention_log.value | int else 'No' }}"

- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['D-1 Set maximum Application log size to 100 mb', "{{ hardening_requirements.windows_hardening.logging_section.application_max_size.value }}", "{{ application_max_size.value }}", "{{ application_max_size_results }}"]
    - ['D-2 Set maximum Security log size to 50 mb', "{{ hardening_requirements.windows_hardening.logging_section.security_max_size.value }}", "{{ security_max_size.value }}", "{{ security_max_size_results }}"]
    - ['D-3 Set maximum System log size to 50 mb', "{{ hardening_requirements.windows_hardening.logging_section.system_max_size.value }}", "{{ system_max_size.value }}", "{{ system_max_size_results }}"] 
    - ['D-4 Set retain method for Application log to As Needed', "{{ hardening_requirements.windows_hardening.logging_section.application_retention_log.value }}", "{{ application_retention_log.value }}", "{{ application_retention_log_results }}"]
    - ['D-5 Set retain method for Security log to As Needed', "{{ hardening_requirements.windows_hardening.logging_section.security_retention_log.value }}", "{{ security_retention_log.value }}", "{{ security_retention_log_results }}"]
    - ['D-6 Set retain method for System log to As Needed', "{{ hardening_requirements.windows_hardening.logging_section.system_retention_log.value }}", "{{ system_retention_log.value }}", "{{ system_retention_log_results }}"]
  delegate_to: localhost

##### E. Auditing Section

- name: Retrieve current 'System Access' settings
  set_fact:
    account_logon_events: "{{ lookup('ini', 'AuditAccountLogon section=Event Audit file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    account_management: "{{ lookup('ini', 'AuditAccountManage section=Event Audit file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    directory_service_access: "{{ lookup('ini', 'AuditDSAccess section=Event Audit file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    logon_events: "{{ lookup('ini', 'AuditLogonEvents section=Event Audit file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    object_access: "{{ lookup('ini', 'AuditObjectAccess section=Event Audit file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    policy_change: "{{ lookup('ini', 'AuditPolicyChange section=Event Audit file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    privilege_use: "{{ lookup('ini', 'AuditPrivilegeUse section=Event Audit file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    process_tracking: "{{ lookup('ini', 'AuditProcessTracking section=Event Audit file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    system_events: "{{ lookup('ini', 'AuditSystemEvents section=Event Audit file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"

- name: Check compliance for 'Auditing' section
  set_fact:
    account_logon_events_results: "{{ 'yes' if hardening_requirements.windows_hardening.auditing_section.account_logon_events.value | int == account_logon_events | int else 'No' }}"
    account_management_results: "{{ 'yes' if hardening_requirements.windows_hardening.auditing_section.account_management.value | int == account_management | int else 'No' }}"
    directory_service_access_results: "{{ 'yes' if hardening_requirements.windows_hardening.auditing_section.directory_service_access.value | int == directory_service_access  | int else 'No' }}"
    logon_events_results: "{{ 'yes' if hardening_requirements.windows_hardening.auditing_section.logon_events.value | int == logon_events  | int else 'No' }}"
    object_access_results: "{{ 'yes' if hardening_requirements.windows_hardening.auditing_section.object_access.value | int == object_access | int else 'No' }}"
    policy_change_results: "{{ 'yes' if hardening_requirements.windows_hardening.auditing_section.policy_change.value | int == policy_change | int else 'No' }}"
    privilege_use_results: "{{ 'yes' if hardening_requirements.windows_hardening.auditing_section.privilege_use.value | int == privilege_use | int else 'No' }}"
    process_tracking_results: "{{ 'yes' if hardening_requirements.windows_hardening.auditing_section.process_tracking.value | int == process_tracking | int else 'No' }}"
    system_events_results: "{{ 'yes' if hardening_requirements.windows_hardening.auditing_section.system_events.value | int == system_events  | int else 'No' }}"

- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['E-1 Account Logon Events', "{{ hardening_requirements.windows_hardening.auditing_section.account_logon_events.value }}", "{{ account_logon_events }}", "{{ account_logon_events_results }}"]
    - ['E-2 Account Management', "{{ hardening_requirements.windows_hardening.auditing_section.account_management.value }}", "{{ account_management }}", "{{ account_management_results }}"]
    - ['E-3 Directory Service Access', "{{ hardening_requirements.windows_hardening.auditing_section.directory_service_access.value }}", "{{ directory_service_access }}", "{{ directory_service_access_results }}"]
    - ['E-4 Logon Events', "{{ hardening_requirements.windows_hardening.auditing_section.logon_events.value }}", "{{ logon_events }}", "{{ logon_events_results }}"]
    - ['E-5 Object Access', "{{ hardening_requirements.windows_hardening.auditing_section.object_access.value }}", "{{ object_access }}", "{{ object_access_results }}"]
    - ['E-6 Policy Change', "{{ hardening_requirements.windows_hardening.auditing_section.policy_change.value}}", "{{ policy_change }}", "{{ policy_change_results }}"] 
    - ['E-7 Privilege Use', "{{ hardening_requirements.windows_hardening.auditing_section.privilege_use.value }}", "{{ privilege_use }}", "{{ privilege_use_results }}"]
    - ['E-8 Process Tracking', "{{ hardening_requirements.windows_hardening.auditing_section.process_tracking.value }}", "{{ process_tracking  }}", "{{ process_tracking_results }}"]
    - ['E-9 System Events', "{{ hardening_requirements.windows_hardening.auditing_section.system_events.value }}", "{{ system_events }}", "{{ system_events_results }}"]
  delegate_to: localhost
  
##### F. File System Section

- name: Retrieve current setting of the 'CrashDumpEnabled' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.file_system_section.disable_memory_dump.path }}"
    name: "{{ hardening_requirements.windows_hardening.file_system_section.disable_memory_dump.name }}"
  register: disable_memory_dump
  
- name: Check compliance for 'File System' section
  set_fact:
    disable_memory_dump_results: "{{ 'yes' if hardening_requirements.windows_hardening.file_system_section.disable_memory_dump.value | int == disable_memory_dump.value | int else 'No' }}"
    NA: 'NA'

- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['F-1 NTFS for all files system', 'NA' , 'NA' , 'Not Applicable']
    - ['F-2 Replace “Everyone” group to “Authenticated Users” on all drives', 'NA' , 'NA' , 'Not Applicable']
    - ['F-3 Ensure the permission rights to folder For Windows Servers 32-bit 64-bit', "{{ hardening_requirements.windows_hardening.file_system_section.disable_memory_dump.value }}", "{{ disable_memory_dump.value }}", "{{ disable_memory_dump_results }}"]
    - ['F-4 Ensure the permission rights to folder For Windows Servers 32-bit 64-bit', 'NA' , 'NA' , 'Not Applicable']
    - ['F-5 Ensure the permission rights to folder For Windows Servers 32-bit 64-bit', 'NA' , 'NA' , 'Not Applicable']
  delegate_to: localhost
  
##### G. Network Section

- name: Retrieve current setting of the 'AutoShareServer' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.network_section.autoshare_server.path }}"
    name: "{{ hardening_requirements.windows_hardening.network_section.autoshare_server.name }}"
  register: autoshare_server
  
- name: Retrieve current setting of the 'RestrictAnonymous' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.network_section.restrict_anonymous.path }}"
    name: "{{ hardening_requirements.windows_hardening.network_section.restrict_anonymous.name }}"
  register: restrict_anonymous
  
- name: Retrieve current setting of the 'NtpServer' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.network_section.ntp_server.path }}"
    name: "{{ hardening_requirements.windows_hardening.network_section.ntp_server.name }}"
  register: ntp_server
  
- name: Retrieve current setting of the 'NoLMHash' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.network_section.disable_storing_lan_manager.path }}"
    name: "{{ hardening_requirements.windows_hardening.network_section.disable_storing_lan_manager.name }}"
  register: disable_storing_lan_manager
  
- name: Check compliance for 'Network' section
  set_fact:
    autoshare_server_results: "{{ 'yes' if hardening_requirements.windows_hardening.network_section.autoshare_server.value | int == autoshare_server | int else 'No' }}"
    restrict_anonymous_results: "{{ 'yes' if hardening_requirements.windows_hardening.network_section.restrict_anonymous.value | int == restrict_anonymous | int else 'No' }}"
    ntp_server_results: "{{ 'yes' if hardening_requirements.windows_hardening.network_section.ntp_server.value | string == ntp_server | string else 'No' }}"
    disable_storing_lan_manager_results: "{{ 'yes' if hardening_requirements.windows_hardening.network_section.disable_storing_lan_manager.value | int == disable_storing_lan_manager | int else 'No' }}"
    
- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['G-1 Disable unused Windows network connections', "{{ hardening_requirements.windows_hardening.network_section.autoshare_server.value }}", "{{ autoshare_server }}", "{{ autoshare_server_results }}"]
    - ['G-2 Permanently remove the default admin shares', "{{ hardening_requirements.windows_hardening.network_section.autoshare_server.value }}", "{{ autoshare_server }}", "{{ autoshare_server_results }}"]
    - ['G-3 Restrict anonymous access via null session', "{{ hardening_requirements.windows_hardening.network_section.restrict_anonymous.value }}", "{{ restrict_anonymous }}", "{{ restrict_anonymous_results }}"]
    - ['G-4 List down and verify all shared folder', "{{ hardening_requirements.windows_hardening.network_section.ntp_server.value }}", "{{ ntp_server.value }}", "{{ ntp_server_results }}"] 
    - ['G-5 Configure NTP service', "{{ hardening_requirements.windows_hardening.network_section.ntp_server.value }}", "{{ ntp_server.value }}", "{{ ntp_server_results }}"] 
    - ['G-6 Disable storing of LAN Manager hashvalue on next password', "{{ hardening_requirements.windows_hardening.network_section.disable_storing_lan_manager.value }}", "{{ disable_storing_lan_manager }}", "{{ disable_storing_lan_manager_results }}"]
  delegate_to: localhost

##### H. Registry Fixes 

- name: Retrieve current setting of the 'DontDisplayLastUserName' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.registry_fixes_section.dont_display_last_user_name.path }}"
    name: "{{ hardening_requirements.windows_hardening.registry_fixes_section.dont_display_last_user_name.name }}"
  register: dont_display_last_user_name
  
- name: Retrieve current setting of the 'ScreenSaverIsSecure' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.registry_fixes_section.screen_saver_is_secure.path }}"
    name: "{{ hardening_requirements.windows_hardening.registry_fixes_section.screen_saver_is_secure.name }}"
  register: screen_saver_is_secure
  
- name: Check compliance for 'Registry Fixes' section
  set_fact:
    dont_display_last_user_name_results: "{{ 'yes' if hardening_requirements.windows_hardening.registry_fixes_section.dont_display_last_user_name.value | int == dont_display_last_user_name.value | int else 'No' }}"
    screen_saver_is_secure_results: "{{ 'yes' if hardening_requirements.windows_hardening.registry_fixes_section.screen_saver_is_secure.value | int == screen_saver_is_secure | int else 'No' }}"
  
- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['H-1 Hiding the Last Logged On Username in the Logon Dialog', "{{ hardening_requirements.windows_hardening.registry_fixes_section.dont_display_last_user_name.value }}", "{{ dont_display_last_user_name.value }}", "{{ dont_display_last_user_name_results }}"]
    - ['H-2 Enable Password protected screen saver', "{{ hardening_requirements.windows_hardening.registry_fixes_section.screen_saver_is_secure.value }}", "{{ screen_saver_is_secure }}", "{{ screen_saver_is_secure_results }}"]
  delegate_to: localhost
  
##### I. Security Options

- name: Retrieve current setting of the 'DisableCAD' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.security_section.enable_cad.path }}"
    name: "{{ hardening_requirements.windows_hardening.security_section.enable_cad.name }}"
  register: enable_cad
  
- name: Retrieve current setting of the 'AddPrinterDrivers' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.security_section.installing_printer_drivers.path }}"
    name: "{{ hardening_requirements.windows_hardening.security_section.installing_printer_drivers.name }}"
  register: installing_printer_drivers
  
- name: Retrieve current setting of the 'CD_ROM' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.security_section.cd_rom.path }}"
    name: "{{ hardening_requirements.windows_hardening.security_section.cd_rom.name }}"
  register: cd_rom
  
- name: Retrieve current setting of the 'ShutdownWithoutLogon' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.security_section.shutdown_without_logon.path }}"
    name: "{{ hardening_requirements.windows_hardening.security_section.shutdown_without_logon.name }}"
  register: shutdown_without_logon
  
- name: Retrieve current setting of the 'FullPrivilegeAuditing' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.security_section.backup_and_restore_privilege.path }}"
    name: "{{ hardening_requirements.windows_hardening.security_section.backup_and_restore_privilege.name }}"
  register: backup_and_restore_privilege
  
- name: Retrieve current setting of the 'FullProtection' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.security_section.global_system_objects.path }}"
    name: "{{ hardening_requirements.windows_hardening.security_section.global_system_objects.name }}"
  register: global_system_objects
  
- name: Retrieve current setting of the 'RequireStrongKey' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.security_section.strong_session_key.path }}"
    name: "{{ hardening_requirements.windows_hardening.security_section.strong_session_key.name }}"
  register: strong_session_key
  
- name: Retrieve current setting of the 'ForceKeyProtection' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.security_section.strong_key_protection.path }}"
    name: "{{ hardening_requirements.windows_hardening.security_section.strong_key_protection.name }}"
  register: strong_key_protection

- name: Retrieve current setting of the 'DisableDomainCreds' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.security_section.disable_domain_creds.path }}"
    name: "{{ hardening_requirements.windows_hardening.security_section.disable_domain_creds.name }}"
  register: disable_domain_creds

- name: Retrieve current 'Privilege Rights' settings
  set_fact:
    seshutdown_privilege: "{{ lookup('ini', 'SeShutdownPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seundock_privilege: "{{ lookup('ini', 'SeUndockPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    sesecurity_privilege: "{{ lookup('ini', 'SeSecurityPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seremote_shutdown_privilege: "{{ lookup('ini', 'SeRemoteShutdownPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seenable_delegation_privilege: "{{ lookup('ini', 'SeEnableDelegationPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    sebackup_privilege: "{{ lookup('ini', 'SeBackupPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    setcb_privilege: "{{ lookup('ini', 'SeTcbPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    semachine_account_privilege: "{{ lookup('ini', 'SeMachineAccountPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seload_driver_privilege: "{{ lookup('ini', 'SeLoadDriverPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seIncreaseQuota_Privilege: "{{ lookup('ini', 'SeIncreaseQuotaPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seAudit_Privilege: "{{ lookup('ini', 'SeAuditPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seAssignPrimaryToken_Privilege: "{{ lookup('ini', 'SeAssignPrimaryTokenPrivilege section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seDenyNetworkLogon_Right: "{{ lookup('ini', 'SeDenyNetworkLogonRight section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seDenyRemoteInteractiveLogon_Right: "{{ lookup('ini', 'SeDenyRemoteInteractiveLogonRight section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"
    seInteractiveLogon_Right: "{{ lookup('ini', 'SeInteractiveLogonRight section=Privilege Rights file=/tmp/{{ inventory_hostname }}_security_settings.ini') }}"

- name: Check compliance for 'Security Options' section
  set_fact:
   enable_cad_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.enable_cad.value | int == enable_cad | int else 'No' }}"
   installing_printer_drivers_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.installing_printer_drivers.value | int == installing_printer_drivers | int else 'No' }}"
   cd_rom_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.cd_rom.value | int == cd_rom | int else 'No' }}"
   shutdown_without_logon_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.shutdown_without_logon.value | int == shutdown_without_logon | int else 'No' }}"
   backup_and_restore_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.backup_and_restore_privilege.value | int == backup_and_restore_privilege | int else 'No' }}"
   global_system_objects_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.global_system_objects.value | int == global_system_objects | int else 'No' }}"
   strong_session_key_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.strong_session_key.value | int == strong_session_key | int else 'No' }}"
   strong_key_protection_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.strong_key_protection.value | int == strong_key_protection | int else 'No' }}"
   disable_domain_creds_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.disable_domain_creds.value | int == disable_domain_creds | int else 'No' }}"
   seshutdown_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seshutdown_privilege.value | string == seshutdown_privilege | string else 'No' }}"
   seundock_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seundock_privilege.value | string == seundock_privilege | string else 'No' }}"
   sesecurity_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.sesecurity_privilege.value | string == sesecurity_privilege | string else 'No' }}"
   #seremote_shutdown_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seremote_shutdown_privilege.value | string == seremote_shutdown_privilege | string else 'No }}"
   seenable_delegation_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seenable_delegation_privilege.value | string == seenable_delegation_privilege | string else 'No' }}"
   sebackup_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.sebackup_privilege.value | string == sebackup_privilege | string else 'No' }}"
   setcb_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.setcb_privilege.value | string == setcb_privilege | string else 'No' }}"
   semachine_account_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.semachine_account_privilege.value | string == semachine_account_privilege | string else 'No' }}"
   seload_driver_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seload_driver_privilege.value | string == seload_driver_privilege | string else 'No' }}"
   seIncreaseQuota_Privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seIncreaseQuota_Privilege | string == seIncreaseQuota_Privilege | string else 'No' }}"
   seAudit_Privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seAudit_Privilege | string == seAudit_Privilege | string else 'No' }}"
   seAssignPrimaryToken_privilege_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seAssignPrimaryToken_Privilege | string == seAssignPrimaryToken_Privilege | string else 'No' }}"
   seDenyNetworkLogon_Right_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seDenyNetworkLogon_Right | string == seDenyNetworkLogon_Right | string else 'No' }}"
   seDenyRemoteInteractiveLogon_Right_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seDenyRemoteInteractiveLogon_Right | string == seDenyRemoteInteractiveLogon_Right | string else 'No' }}"
   seInteractiveLogon_Right_results: "{{ 'Yes' if hardening_requirements.windows_hardening.security_section.seInteractiveLogon_Right | string == seInteractiveLogon_Right | string else 'No' }}"
   
- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['I-1 Disable Allow System to be shut down without having to logon', "{{ hardening_requirements.windows_hardening.security_section.shutdown_without_logon.value }}", "{{ shutdown_without_logon }}", "{{ shutdown_without_logon_results }}"] 
    - ['I-2 Enable audit use of backup and restore privilege', "{{ hardening_requirements.windows_hardening.security_section.backup_and_restore_privilege.value }}", "{{ backup_and_restore_privilege }}", "{{ backup_and_restore_privilege_results }}"] 
    - ['I-3 Enable Ctrl-Alt-Del requirement during logon', "{{ hardening_requirements.windows_hardening.security_section.enable_cad.value }}", "{{ enable_cad }}", "{{ enable_cad_results }}"]
    - ['I-4 Enable prevent administrator from installing printer drivers', "{{ hardening_requirements.windows_hardening.security_section.installing_printer_drivers.value }}", "{{ installing_printer_drivers }}", "{{ installing_printer_drivers_results }}"] 
    - ['I-5 Enable restrict CD-ROM access to locally logged-on user only', "{{ hardening_requirements.windows_hardening.security_section.cd_rom.value }}", "{{ cd_rom }}", "{{ cd_rom_results }}"] 
    - ['I-6 Set only Administrators to load and unload device drivers', "{{ hardening_requirements.windows_hardening.security_section.seload_driver_privilege.value }}", "{{ seload_driver_privilege }}", "{{ seload_driver_privilege_results }}"] 
    - ['I-7 Set only Authenticated Users to add workstations to domain', "{{ hardening_requirements.windows_hardening.security_section.semachine_account_privilege.value }}", "{{ semachine_account_privilege }}", "{{ semachine_account_privilege_results }}"] 
    - ['I-8 Set only Administrators to adjust memory quotas for a process', "{{ hardening_requirements.windows_hardening.security_section.seIncreaseQuota_Privilege.value }}", "{{ seIncreaseQuota_Privilege }}", "{{ seIncreaseQuota_Privilege_results }}"] 
    - ['I-9 Set only LOCAL SERVICE NETWORK SERVICE Administrators to generate security audits', "{{ hardening_requirements.windows_hardening.security_section.seAudit_Privilege.value }}", "{{ seAudit_Privilege }}", "{{ seAudit_Privilege_results }}"] 
    - ['I-10 Set only LOCAL SERVICE NETWORK SERVICE to replace a process level token unless specially required', "{{  hardening_requirements.windows_hardening.security_section.seAssignPrimaryToken_Privilege.value }}", "{{ seAssignPrimaryToken_Privilege }}", "{{ seAssignPrimaryToken_privilege_results }}"] 
    - ['I-11 Set only Administrators to remove computer from docking station', "{{ hardening_requirements.windows_hardening.security_section.seundock_privilege.value }}", "{{ seundock_privilege }}", "{{ seundock_privilege_results }}"] 
    - ['I-12 Enable strengthen default permissions of global system objects', "{{ hardening_requirements.windows_hardening.security_section.global_system_objects.value }}", "{{ global_system_objects }}", "{{ global_system_objects_results }}"] 
    - ['I-13 Set User must enter a password each time they use a key in System Cryptography', "{{ hardening_requirements.windows_hardening.security_section.strong_key_protection.value }}", "{{ strong_key_protection }}", "{{ strong_key_protection_results }}"]
    - ['I-14 Enable domain members to use strong session key', "{{ hardening_requirements.windows_hardening.security_section.strong_session_key.value }}", "{{ strong_session_key }}", "{{ strong_session_key_results }}"] 
    - ['I-15 Prevent Stored User Names and Passwords from storing passwords and credentials', "{{ hardening_requirements.windows_hardening.security_section.disable_domain_creds.value }}", "{{ disable_domain_creds }}", "{{ disable_domain_creds_results }}"] 
    - ['I-16 Enable domain members to require a negotiation of message confidentiality between Domain Controllers', "{{ hardening_requirements.windows_hardening.security_section.sesecurity_privilege.value }}", "{{ sesecurity_privilege }}", "{{ sesecurity_privilege_results }}"] 
    - ['I-17 Restrict users from accessing a computer over a network', "{{ hardening_requirements.windows_hardening.security_section.seDenyNetworkLogon_Right.value }}", "{{ seDenyNetworkLogon_Right }}", "{{ seDenyNetworkLogon_Right_results }}"]
    - ['I-18 Restrict users and groups from logging in as a Terminal Service clients', "{{ hardening_requirements.windows_hardening.security_section.seDenyRemoteInteractiveLogon_Right.value }}", "{{ seDenyRemoteInteractiveLogon_Right }}", "{{ seDenyRemoteInteractiveLogon_Right_results }}"]
    - ['I-19 Set only Administrators to allow process to impersonate any user without authentication', "{{ hardening_requirements.windows_hardening.security_section.setcb_privilege.value }}", "{{ setcb_privilege }}", "{{ setcb_privilege_results }}"]  
    - ['I-20 Set only Administrators to shut down the operating system', "{{ hardening_requirements.windows_hardening.security_section.seshutdown_privilege.value }}", "{{ seshutdown_privilege }}", "{{ seshutdown_privilege_results }}"] 
    - ['I-21 Set only Administrators Backup Operators Power Users to allow log on locally to the operating system', "{{ hardening_requirements.windows_hardening.security_section.seInteractiveLogon_Right.value }}", "{{ seInteractiveLogon_Right }}", "{{ seInteractiveLogon_Right_results }}"]
    - ['I-22 Set only Administrators and Backup Operators to allow backup files and directories on OS', "{{ hardening_requirements.windows_hardening.security_section.sebackup_privilege.value }}", "{{ sebackup_privilege }}", "{{ sebackup_privilege_results }}"] 
    - ['I-23 Remove all user and computer object rights to be Trusted for Delegation', "{{ hardening_requirements.windows_hardening.security_section.seenable_delegation_privilege.value }}", "{{ seenable_delegation_privilege }}", "{{ seenable_delegation_privilege_results }}"] 
    #- ['I-24 Remove all user rights to shut down a computer from a remote location on the network', "{{ hardening_requirements.windows_hardening.security_section.seremote_shutdown_privilege.value }}", "{{ seremote_shutdown_privilege }}", "{{ seremote_shutdown_privilege_results }}"] 
    - ['I-26 Set only Administrators to access auditing options for individual resources', "{{ hardening_requirements.windows_hardening.security_section.sesecurity_privilege.value }}", "{{ sesecurity_privilege }}", "{{ sesecurity_privilege_results }}"]  
    - ['I-27 Disable user rights to view their Resultant Set of Policy', 'NA', 'NA', 'Not Applicable']
  delegate_to: localhost

##### K. TCP/IP Registry Tightening

- name: Retrieve current setting of the 'enable_icmp_redirect' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.tcp_ip_registry_tightening.enable_icmp_redirect.path }}"
    name: "{{ hardening_requirements.windows_hardening.tcp_ip_registry_tightening.enable_icmp_redirect.name }}"
  register: enable_icmp_redirect
  
- name: Retrieve current setting of the 'ip_enable_router' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.tcp_ip_registry_tightening.ip_enable_router.path }}"
    name: "{{ hardening_requirements.windows_hardening.tcp_ip_registry_tightening.ip_enable_router.name }}"
  register: ip_enable_router
  
- name: Check compliance for 'Network' section
  set_fact:
    enable_icmp_redirect_results: "{{ 'Yes' if hardening_requirements.windows_hardening.tcp_ip_registry_tightening.enable_icmp_redirect.value | int == enable_icmp_redirect | int else 'No' }}"
    ip_enable_router_results: "{{ 'Yes' if hardening_requirements.windows_hardening.tcp_ip_registry_tightening.ip_enable_router.value | int == ip_enable_router | int else 'No' }}"
    l1_results: "{{ 'Yes' if 'Users' | int == 'Users' | int else 'No' }}"
    
- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['J-1 Enable SNMP settings', 'NA' , 'NA' , 'Not Applicable']
    - ['K-1 Set value to disable on Enable ICMPRedirect', "{{ hardening_requirements.windows_hardening.tcp_ip_registry_tightening.enable_icmp_redirect.value }}", "{{ enable_icmp_redirect }}", "{{ enable_icmp_redirect_results }}"]
    - ['K-2 Disable IP forwarding', "{{ hardening_requirements.windows_hardening.tcp_ip_registry_tightening.ip_enable_router.value }}", "{{ ip_enable_router }}", "{{ ip_enable_router_results }}"]
    - ['L-1 Remove Users group access from Read  Execute access to the below EXE files', 'BUILTIN\Users:RX' , 'BUILTIN\Users:RX', "{{ l1_results }}"]
  delegate_to: localhost


##### M. Windows Logon Banner

- name: Retrieve current setting of the 'LegalNoticeCaption' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.windows_logon_banner_section.windows_title_logon_banner.path }}"
    name: "{{ hardening_requirements.windows_hardening.windows_logon_banner_section.windows_title_logon_banner.name }}"
  register: windows_title_logon_banner
  
- name: Retrieve current setting of the 'LegalNoticeText' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.windows_logon_banner_section.windows_text_logon_banner.path }}"
    name: "{{ hardening_requirements.windows_hardening.windows_logon_banner_section.windows_text_logon_banner.name }}"
  register: windows_text_logon_banner

  
- name: Check compliance for 'Windows Logon Banner' section
  set_fact:
    windows_title_logon_banner_results: "{{ 'Yes' if hardening_requirements.windows_hardening.windows_logon_banner_section.windows_title_logon_banner.value | string == windows_title_logon_banner.value | string else 'No' }}"
    windows_text_logon_banner_results: "{{ 'Yes' if hardening_requirements.windows_hardening.windows_logon_banner_section.windows_text_logon_banner.value | string == windows_text_logon_banner.value | string else 'No'  }}"
    
- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['M-1 Windows text logon banner', "{{ hardening_requirements.windows_hardening.windows_logon_banner_section.windows_title_logon_banner.value }}", "{{ windows_title_logon_banner.value }}", "{{ windows_title_logon_banner_results }}"]
    - ['M-2 Windows title logon banner', "{{ hardening_requirements.windows_hardening.windows_logon_banner_section.windows_text_logon_banner.value }}", "{{ windows_text_logon_banner.value }}", "{{ windows_text_logon_banner_results }}"]
    - ['N-1 Install antivirus software and run automatically in the background', '4', 'NA', 'NA']
  delegate_to: localhost

##### O. System Services (Enabled)

- name: Retrieve current setting of the 'group_policy_client' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.group_policy_client.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.group_policy_client.name }}"
  register: group_policy_client
  
- name: Retrieve current setting of the 'ike_and_authip' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.ike_and_authip.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.ike_and_authip.name }}"
  register: ike_and_authip
  
- name: Retrieve current setting of the 'network_location_awareness' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.network_location_awareness.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.network_location_awareness.name }}"
  register: network_location_awareness
  
- name: Retrieve current setting of the 'windows_update' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.windows_update.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.windows_update.name }}"
  register: windows_update

- name: Retrieve current setting of the 'background_intelligent_transfer_service' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.background_intelligent_transfer_service.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.background_intelligent_transfer_service.name }}"
  register: background_intelligent_transfer_service

- name: Retrieve current setting of the 'base_filtering_engine' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.base_filtering_engine.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.base_filtering_engine.name }}"
  register: base_filtering_engine
  
- name: Retrieve current setting of the 'com_event_system' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.com_event_system.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.com_event_system.name }}"
  register: com_event_system
  
- name: Retrieve current setting of the 'cryptographic_services' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.cryptographic_services.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.cryptographic_services.name }}"
  register: cryptographic_services 
  
- name: Retrieve current setting of the 'distributed_link_tracking_client' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.distributed_link_tracking_client.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.distributed_link_tracking_client.name }}"
  register: distributed_link_tracking_client

- name: Retrieve current setting of the 'dns_client' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.dns_client.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.dns_client.name }}"
  register: dns_client
  
- name: Retrieve current setting of the 'windows_event_log' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.windows_event_log.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.windows_event_log.name }}"
  register: windows_event_log
  
- name: Retrieve current setting of the 'ipsec_policy_agent' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.ipsec_policy_agent.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.ipsec_policy_agent.name }}"
  register: ipsec_policy_agent
  
- name: Retrieve current setting of the 'net_logon' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.net_logon.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.net_logon.name }}"
  register: net_logon
  
- name: Retrieve current setting of the 'network_connections' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.network_connections.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.network_connections.name }}"
  register: network_connections

- name: Retrieve current setting of the 'plug_and_play' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.plug_and_play.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.plug_and_play.name }}"
  register: plug_and_play
  
- name: Retrieve current setting of the 'remote_procedure_call' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.remote_procedure_call.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.remote_procedure_call.name }}"
  register: remote_procedure_call
  
- name: Retrieve current setting of the 'remote_registry' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.remote_registry.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.remote_registry.name }}"
  register: remote_registry
  
- name: Retrieve current setting of the 'secondary_logon' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.secondary_logon.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.secondary_logon.name }}"
  register: secondary_logon
  
- name: Retrieve current setting of the 'security_accounts_manager' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.security_accounts_manager.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.security_accounts_manager.name }}"
  register: security_accounts_manager

- name: Retrieve current setting of the 'server' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.server.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.server.name }}"
  register: server

- name: Retrieve current setting of the 'system_event_notification_service' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.system_event_notification_service.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.system_event_notification_service.name }}"
  register: system_event_notification_service
  
- name: Retrieve current setting of the 'tcp_ip_netbios_helper' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.tcp_ip_netbios_helper.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.tcp_ip_netbios_helper.name }}"
  register: tcp_ip_netbios_helper
  
- name: Retrieve current setting of the 'terminal_services' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.terminal_services.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.terminal_services.name }}"
  register: terminal_services
  
- name: Retrieve current setting of the 'windows_management_instrumentation' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.windows_management_instrumentation.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.windows_management_instrumentation.name }}"
  register: windows_management_instrumentation

- name: Retrieve current setting of the 'windows_time' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.windows_time.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.windows_time.name }}"
  register: windows_time

- name: Retrieve current setting of the 'workstation' registry
  win_reg_stat:
    path: "{{ hardening_requirements.windows_hardening.system_services.workstation.path }}"
    name: "{{ hardening_requirements.windows_hardening.system_services.workstation.name }}"
  register: workstation
  
- name: Check compliance for 'System Services' section
  set_fact:
    group_policy_client_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.group_policy_client.raw_value | int == group_policy_client.value | int else 'No' }}"
    ike_and_authip_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.ike_and_authip.raw_value | int == ike_and_authip.value | int else 'No' }}"
    network_location_awareness_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.network_location_awareness.raw_value | int == network_location_awareness.value | int else 'No' }}"
    windows_update_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.windows_update.raw_value | int == windows_update.value | int else 'No' }}"
    background_intelligent_transfer_service_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.background_intelligent_transfer_service.raw_value | int == background_intelligent_transfer_service.value | int else 'No' }}"
    base_filtering_engine_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.base_filtering_engine.raw_value | int == base_filtering_engine.value | int else 'No' }}"
    com_event_system_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.com_event_system.raw_value | int == com_event_system.value | int else 'No' }}"
    cryptographic_services_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.cryptographic_services.raw_value | int == cryptographic_services.value | int else 'No' }}"
    distributed_link_tracking_client_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.distributed_link_tracking_client.raw_value | int == distributed_link_tracking_client.value | int else 'No' }}"
    dns_client_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.dns_client.raw_value | int == dns_client.value | int else 'No' }}"
    windows_event_log_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.windows_event_log.raw_value | int == windows_event_log.value | int else 'No' }}"
    ipsec_policy_agent_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.ipsec_policy_agent.raw_value | int == ipsec_policy_agent.value | int else 'No' }}"
    net_logon_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.net_logon.raw_value | int == net_logon.value | int else 'No' }}"
    network_connections_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.network_connections.raw_value | int == network_connections.value | int else 'No' }}"
    plug_and_play_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.plug_and_play.raw_value | int == plug_and_play.value | int else 'No' }}"
    remote_procedure_call_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.remote_procedure_call.raw_value | int == remote_procedure_call.value | int else 'No' }}"
    remote_registry_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.remote_registry.raw_value | int == remote_registry.value | int else 'No' }}"
    secondary_logon_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.secondary_logon.raw_value | int == secondary_logon.value | int else 'No' }}"
    security_accounts_manager_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.security_accounts_manager.raw_value | int == security_accounts_manager.value | int else 'No' }}"
    server_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.server.raw_value | int == server.value | int else 'No' }}"
    system_event_notification_service_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.system_event_notification_service.raw_value | int == system_event_notification_service.value | int else 'No' }}"
    tcp_ip_netbios_helper_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.tcp_ip_netbios_helper.raw_value | int == tcp_ip_netbios_helper.value | int else 'No' }}"
    terminal_services_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.terminal_services.raw_value | int == terminal_services.value | int else 'No' }}"
    windows_management_instrumentation_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.windows_management_instrumentation.raw_value | int == windows_management_instrumentation.value | int else 'No' }}"
    windows_time_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.windows_time.raw_value | string == windows_time.value | string else 'No' }}"
    workstation_results: "{{ 'Yes' if hardening_requirements.windows_hardening.system_services.workstation.raw_value | int == workstation.value | int else 'No' }}"
    
- name: Insert entry into csv file
  shell: "echo {{ ansible_hostname }},{{ ansible_ip_addresses[0] }},{{ ansible_date_time.date }},{{ item[0] }},{{ item[3] }} >> {{ host_csv_file }}"
  loop:
    - ['O-1 Group Policy Client', "{{ hardening_requirements.windows_hardening.system_services.group_policy_client.value }}", "{{ group_policy_client.value }}", "{{ group_policy_client_results }}"]
    - ['O-2 IKE and AuthIP IPsec Keying Modules', "{{ hardening_requirements.windows_hardening.system_services.ike_and_authip.value }}", "{{ ike_and_authip.value }}", "{{ ike_and_authip_results }}"]
    - ['O-3 Network Location Awareness', "{{ hardening_requirements.windows_hardening.system_services.network_location_awareness.value }}", "{{ network_location_awareness }}", "{{ network_location_awareness_results }}"]
    - ['O-4 Windows Update', "{{ hardening_requirements.windows_hardening.system_services.windows_update.value }}", "{{ windows_update }}", "{{ windows_update_results }}"]
    - ['O-5 Background Intelligent Transfer Service', "{{ hardening_requirements.windows_hardening.system_services.background_intelligent_transfer_service.value }}", "{{ background_intelligent_transfer_service }}", "{{ background_intelligent_transfer_service_results }}"]
    - ['O-6 Base Filtering Engine', "{{ hardening_requirements.windows_hardening.system_services.base_filtering_engine.value }}", "{{ base_filtering_engine }}", "{{ base_filtering_engine_results }}"]
    - ['O-7 COM and Event System', "{{ hardening_requirements.windows_hardening.system_services.com_event_system.value }}", "{{ com_event_system }}", "{{ com_event_system_results }}"]
    - ['O-9 Cryptographic Services', "{{ hardening_requirements.windows_hardening.system_services.cryptographic_services.value }}", "{{ cryptographic_services }}", "{{ cryptographic_services_results }}"]
    - ['O-10 Distributed Link Tracking Client', "{{ hardening_requirements.windows_hardening.system_services.distributed_link_tracking_client.value }}", "{{ distributed_link_tracking_client }}", "{{ distributed_link_tracking_client_results }}"]
    - ['O-11 ODNS Client', "{{ hardening_requirements.windows_hardening.system_services.dns_client.value }}", "{{ dns_client }}", "{{ dns_client_results }}"]
    - ['O-12 Windows Event Log', "{{ hardening_requirements.windows_hardening.system_services.windows_event_log.value }}", "{{ windows_event_log }}", "{{ windows_event_log_results }}"]
    - ['O-13 IPSEC Policy Agent', "{{ hardening_requirements.windows_hardening.system_services.ipsec_policy_agent.value }}", "{{ ipsec_policy_agent }}", "{{ ipsec_policy_agent_results }}"]
    - ['O-14 Net Logon', "{{ hardening_requirements.windows_hardening.system_services.net_logon.value }}", "{{ net_logon }}", "{{ net_logon_results }}"]
    - ['O-15 Network Connections', "{{ hardening_requirements.windows_hardening.system_services.network_connections.value }}", "{{ network_connections }}", "{{ network_connections_results }}"]
    - ['O-16 Plug and Play', "{{ hardening_requirements.windows_hardening.system_services.plug_and_play.value }}", "{{ plug_and_play }}", "{{ plug_and_play_results }}"]
    - ['O-17 Protected Storage 2008 and 2008R2 Only', 'NA', 'NA', 'Not Applicable']
    - ['O-18 Remote Procedure Call ', "{{ hardening_requirements.windows_hardening.system_services.remote_procedure_call.value }}", "{{ remote_procedure_call }}", "{{ remote_procedure_call_results }}"]
    - ['O-19 Remote Registry', "{{ hardening_requirements.windows_hardening.system_services.remote_registry.value }}", "{{ remote_registry }}", "{{ remote_registry_results }}"]
    - ['O-20 Secondary Logon', "{{ hardening_requirements.windows_hardening.system_services.secondary_logon.value }}", "{{ secondary_logon }}", "{{ secondary_logon_results }}"]
    - ['O-21 Security Accounts Manager', "{{ hardening_requirements.windows_hardening.system_services.security_accounts_manager.value }}", "{{ security_accounts_manager }}", "{{ security_accounts_manager_results }}"]
    - ['O-22 Server', "{{ hardening_requirements.windows_hardening.system_services.server.value }}", "{{ server }}", "{{ server_results }}"]
    - ['O-23 System Event Notification Service', "{{ hardening_requirements.windows_hardening.system_services.system_event_notification_service.value }}", "{{ system_event_notification_service }}", "{{ system_event_notification_service_results }}"]
    - ['O-24 TCP and IP NetBIOS Helper', "{{ hardening_requirements.windows_hardening.system_services.tcp_ip_netbios_helper.value }}", "{{ tcp_ip_netbios_helper }}", "{{ tcp_ip_netbios_helper_results }}"]
    - ['O-25 Terminal Services', "{{ hardening_requirements.windows_hardening.system_services.terminal_services.value }}", "{{ terminal_services }}", "{{ terminal_services_results }}"]
    - ['O-26 Windows Management Instrumentation', "{{ hardening_requirements.windows_hardening.system_services.windows_management_instrumentation.value }}", "{{ windows_management_instrumentation }}", "{{ windows_management_instrumentation_results }}"]
    - ['O-27 Windows Time', "{{ hardening_requirements.windows_hardening.system_services.windows_time.value }}", "{{ windows_time }}", "{{ windows_time_results }}"]
    - ['O-28 Workstation', "{{ hardening_requirements.windows_hardening.system_services.workstation.value }}", "{{ workstation }}", "{{ workstation_results }}"]
  delegate_to: localhost 
  
- tasks:
  # name: converting to html
    template:
      src: ./report.html.j2
      dest: /opt/{{ ansible_facts['hostname'] }}.html
    delegate_to: localhost
- name: Copying report to target machine
  copy:
    src: /opt/{{ ansible_facts['hostname'] }}.html
    dest: \\192.168.1.116\tmp
